var Board = {

	extensions : require('extensions.js'),
	grid : {
		width : 0,
		height: 0,
		rows : [],		
	},
	playerPieces : {},

	initialize: function(width, height) {
		this.grid.height = height;
		this.grid.width = width;
		for(var row = 0; row < width; row ++) {
			this.grid.rows.push({ columns : [] });
		}
		return this;
	},

	reset : function() {
		for(var x = 0; x < this.grid.rows.length; x++) {
			this.grid.rows[x].columns.length = 0;
		}
	},

	getGrid : function() {
		return this.extensions.clone(this.grid);
	},

	rowHasSpace : function(x) {
		return this.grid.rows[x] && this.grid.rows[x].columns.length < this.grid.height;
	},

	addPiece : function(playerIndex, x, y) {
		y = this.grid.rows[x].columns.length;
		this.grid.rows[x].columns.push(playerIndex);
	},

	getPiece : function(x, y) {
		if (this.grid.rows[x] && y < this.grid[x].columns.length) {
			return this.grid[x].columns[y];
		}
		return null;
	},

	countMatchingPieces : function(playerIndex, x, y, dx, dy) {
		function checkNext(grid, nx,ny)
		{
			nx += dx;
			ny += dy;

			if( nx < 0 || 
				nx > grid.rows.length-1 ||
				ny < 0 ||
				ny > grid.rows[nx].columns.length-1 ||
				grid.rows[nx].columns[ny] != playerIndex)				
			{
				return;
			}
			neighbours ++;
			checkNext(grid, nx, ny);				
		}

		var neighbours = 0;
		checkNext(this.grid, x, y);		
		return neighbours;
	},

	export : function () {
		exports.initialize = this.extensions.bind(this.initialize, this);
	}
}

Board.export();