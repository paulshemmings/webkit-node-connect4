/*
 * Nifty little method to ensure that allows you to
 * bind a method to a desired scope.
 * Very similar to JQuery $.proxy
 * http://howtonode.org/what-is-this
 *
 * Used like this obj.onEventHandler = bind(HandlerClass.method, HandlerClass);
 *
 * When the handler calls the method, the method will run within the scope
 * of the HandlerClass
 */

exports.bind = function(fn, scope) {
  return function () {
    return fn.apply(scope, arguments);
  }
}

/* 
 * Nifty little method to elegantly copy an object
 * http://stackoverflow.com/questions/728360/most-elegant-way-to-clone-a-javascript-object
 */

function clone(obj) {
    var copy;

    // Handle the 3 simple types, and null or undefined
    if (null == obj || "object" != typeof obj) return obj;

    // Handle Date
    if (obj instanceof Date) {
        copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }

    // Handle Array
    if (obj instanceof Array) {
        copy = [];
        for (var i = 0, len = obj.length; i < len; i++) {
            copy[i] = clone(obj[i]);
        }
        return copy;
    }

    // Handle Object
    if (obj instanceof Object) {
        copy = {};
        for (var attr in obj) {
            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
        }
        return copy;
    }

    throw new Error("Unable to copy obj! Its type isn't supported.");
}

exports.clone = clone;
