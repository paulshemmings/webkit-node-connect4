var View = {

	extensions : require('extensions.js'),
	boardElement : null,
	playerListElement : null,
	gameStatusElement : null,
	AnimationDelay : 50,

	initialize : function(document, boardId, playerListId, gameStatusId) {
		this.playerListElement = document.getElementById(playerListId);
		this.gameStatusElement = document.getElementById(gameStatusId);
		this.boardElement = document.createElement('table');		
		document.getElementById(boardId).appendChild(this.boardElement);
		return this;
	},

	drawBoard : function(grid) {
		this.boardElement.innerHTML = "";
		for (var y = grid.height-1; y >=0; y--) {		
			var row = grid.rows[x];
			var rowElement = this.createBoardRow(y);
			this.boardElement.appendChild(rowElement);
			for(var x = 0; x < grid.rows.length; x++) {
				var playerIndex = null; 			
				if (y < grid.rows[x].columns.length) {
					playerIndex = grid.rows[x].columns[y];
				}
				rowElement.appendChild(this.createRowColumn(x, y, playerIndex));
			}
		}
	},

	animateMove : function(grid, playerIndex, x, callback) {		
		if (x < grid.rows.length) {
			var y = ny = grid.height-1;
			var ownerDocument = this.boardElement.ownerDocument;
			var delay = this.AnimationDelay;
			var velocity = this.AnimationDelay/10;
			function animate() {			
				var position = ownerDocument.getElementById(x + '_' + ny);
				position.setAttribute('class', playerIndex == 0 ? 'square red' : 'square blue');
				if(ny < y) {
					var oldPosition = ownerDocument.getElementById(x + '_' + (ny+1));
					oldPosition.setAttribute('class', 'square white');
				}

				if (--ny >= grid.rows[x].columns.length-1) {				
					delay -= velocity;
					window.setTimeout(animate, delay);
				} else {
					callback();
				}
			}
			animate();			
		}
	},

	drawPlayerList : function(players, currentPlayerIndex) {
		this.playerListElement.innerHTML = "";
		for(var p = 0; p < players.length; p++) {
			var activeClass = currentPlayerIndex == p ? 'active' : 'inactive';
			var colorClass = p == 0 ? 'redPlayer' : 'bluePlayer';
			var player = players[p];

			var playerElement = this.playerListElement.ownerDocument.createElement('li');
			playerElement.setAttribute('class', activeClass + ' ' + colorClass);
			playerElement.innerHTML = players[p].getId();

			if (player.isAI()) {
				var infoElement = this.playerListElement.ownerDocument.createElement('div');
				infoElement.innerHTML = 'offensive: ' + player.getBehaviorWeightings().offensive + '</br> defensive: ' + player.getBehaviorWeightings().defensive;
				playerElement.appendChild(infoElement);
			}

			this.playerListElement.appendChild(playerElement);
		}
	},

	writeStatus : function(status, replace) {
		if (!replace) {
			this.gameStatusElement.innerHTML += "</br>" + status;		
		} else {
			this.gameStatusElement.innerHTML = status;
		}
	}, 

	createBoardRow : function(y) {
		return this.boardElement.ownerDocument.createElement('tr');
	},

	createRowColumn : function(x, y, playerIndex) {
		var id = x.toString() + "_" + y.toString();
		var element = this.boardElement.ownerDocument.createElement('td');
		var color = playerIndex == null ? 'white' : playerIndex == 0 ? 'red' : 'blue';
		element.setAttribute('id', id);
		element.setAttribute('class', 'square ' + color);
		element.setAttribute('data-x', x);
		element.setAttribute('data-y', y);
		element.setAttribute('data-playerIndex', playerIndex || '');
		return element;
	},

	export : function() {
		exports.initialize = this.extensions.bind(this.initialize, this);
	}
};

View.export();